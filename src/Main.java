import java.sql.*;
import java.util.*;

import domain.*;
import repositories.*;
import repositories.impl.*;
import unitofwork.*;

public class Main {

	public static void main(String[] args) {
		
		Employee employee1 = new Employee();
		employee1.setName("Tomasz");
		employee1.setSurname("Wieckiewicz");
		
		Company company1 = new Company();
		company1.setName("BigCompany");
		company1.setLegalStructure("SA");
		company1.setCompanyId("12-34-56-78");
		
		CompanyAddress address1 = new CompanyAddress();
		address1.setCountry("Polska");
		address1.setCity("Gdansk");
		address1.setPostalCode("70-709");
		address1.setStreet("Wiejska");
		address1.setHouseNumber("17");
		
		Position position1 = new Position();
		position1.setName("Kierownik");
		Position position2 = new Position();
		position2.setName("Ksiegowy");
		
		Salary salary1 = new Salary();
		salary1.setAmount("5000");
		Salary salary2 = new Salary();
		salary2.setAmount("5500");
		Salary salary3 = new Salary();
		salary3.setAmount("6000");
		
		try 
		{
			Connection connection = DriverManager.getConnection("jdbc:hsqldb:mem:mydb", "SA", "");
			IUnitOfWork uow = new UnitOfWork(connection);
																				
			String createTable =									
			 
					"CREATE TABLE employees("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20),"
					+ "surname VARCHAR(20)"
					+ ")";
						
			 String createTable2 =
					 
					"CREATE TABLE companies("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20),"
					+ "legalstructure VARCHAR(20),"
					+ "companyid VARCHAR(20)"
					+ ")";
					
			String createTable3 =
					"CREATE TABLE addresses("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "country VARCHAR(20),"
					+ "city VARCHAR(20),"
					+ "postalcode VARCHAR(20),"
					+ "street VARCHAR(20),"
					+ "housenumber VARCHAR(20)"
					+ ")";
					
			String createTable4 =
					"CREATE TABLE positions("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20)"
					+ ")";
			
			String createTable5 =
					"CREATE TABLE salaries("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "amount VARCHAR(20)"
					+ ")";
						
						
			Statement stmt = connection.createStatement();
			stmt.executeUpdate(createTable);
			stmt.executeUpdate(createTable2);
			stmt.executeUpdate(createTable3);
			stmt.executeUpdate(createTable4);
			stmt.executeUpdate(createTable5);
			
			IRepositoryCatalog catalog = new RepositoryCatalog(connection, uow);
			
			catalog.getEmployees().save(employee1);
			uow.commit();
			List<Employee> employeesFromDb = catalog.getEmployees().getAll();
			for(Employee employeeFromDb : employeesFromDb)
				System.out.println(employeeFromDb.getId()+" "+employeeFromDb.getName()+" "+employeeFromDb.getSurname());
			Employee e = catalog.getEmployees().get(0);
			e.setSurname("McDonald");
			catalog.getEmployees().update(e);
			uow.commit();
			catalog.getEmployees().delete(employeesFromDb.get(0));
			for(Employee employeeFromDb : catalog.getEmployees().getAll())
				System.out.println(employeeFromDb.getId()+" "+employeeFromDb.getName()+" "+employeeFromDb.getSurname());
			
			catalog.getCompanies().save(company1);
			uow.commit();
			List<Company> companiesFromDb = catalog.getCompanies().getAll();
			for(Company companyFromDb : companiesFromDb)
				System.out.println(companyFromDb.getId()+" "+companyFromDb.getName()+" "
				+companyFromDb.getLegalStructure()+" "+companyFromDb.getCompanyId());
			Company c = catalog.getCompanies().get(0);
			c.setName("Very Big Company");
			c.setCompanyId("70-07-07-07");
			catalog.getCompanies().update(c);
			uow.commit();
			catalog.getCompanies().delete(companiesFromDb.get(0));
			for(Company companyFromDb : catalog.getCompanies().getAll())
				System.out.println(companyFromDb.getId()+" "+companyFromDb.getName()+" "
				+companyFromDb.getLegalStructure()+" "+companyFromDb.getCompanyId());
			
			
			catalog.getAddresses().save(address1);
			uow.commit();
			List<CompanyAddress> addressesFromDb = catalog.getAddresses().getAll();
			for(CompanyAddress addressFromDb : addressesFromDb)
				System.out.println(addressFromDb.getId()+" "+addressFromDb.getCountry()+" "+addressFromDb.getCity()+" "
				+addressFromDb.getPostalCode()+" "+addressFromDb.getStreet()+" "+addressFromDb.getHouseNumber());
			CompanyAddress ca = catalog.getAddresses().get(0);
			catalog.getAddresses().update(ca);
			ca.setCity("Warszawa");
			uow.commit();
			catalog.getAddresses().delete(addressesFromDb.get(0));
			for(CompanyAddress addressFromDb : catalog.getAddresses().getAll())
				System.out.println(addressFromDb.getId()+" "+addressFromDb.getCountry()+" "+addressFromDb.getCity()+" "
				+addressFromDb.getPostalCode()+" "+addressFromDb.getStreet()+" "+addressFromDb.getHouseNumber());
						
			catalog.getPositions().save(position1);
			catalog.getPositions().save(position2);
			uow.commit();
			List<Position> positionsFromDb = catalog.getPositions().getAll();
			for(Position positionFromDb : positionsFromDb)
				System.out.println(positionFromDb.getId()+" "+positionFromDb.getName());
			
			catalog.getSalaries().save(salary1);
			catalog.getSalaries().save(salary2);
			catalog.getSalaries().save(salary3);
			uow.commit();
			List<Salary> salariesFromDb = catalog.getSalaries().getAll();
			for(Salary salaryFromDb : salariesFromDb)
				System.out.println(salaryFromDb.getId()+" "+salaryFromDb.getAmount());
			Salary s = catalog.getSalaries().get(2);
			catalog.getSalaries().update(s);
			s.setAmount("7500");
			catalog.getSalaries().delete(salariesFromDb.get(0));
			uow.commit();
			for(Salary salaryFromDb : catalog.getSalaries().getAll())
				System.out.println(salaryFromDb.getId()+" "+salaryFromDb.getAmount());
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("koniec");
	}

}