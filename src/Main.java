import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import domain.*;
import repositories.*;
import repositories.impl.*;

public class Main {

	public static void main(String[] args) {
		
		String url ="jdbc:hsqldb:hsql://localhost/workdb/";
		
		Employee employee1 = new Employee();
		employee1.setName("Tomasz");
		employee1.setSurname("Wieckiewicz");
		
		Company company1 = new Company();
		company1.setName("BigCompany");
		company1.setLegalStructure("SA");
		company1.setCompanyId("12-34-56-78");
		
		CompanyAddress address1 = new CompanyAddress();
		address1.setCountry("Polska");
		address1.setCity("Gdansk");
		address1.setPostalCode("70-709");
		address1.setStreet("Wiejska");
		address1.setHouseNumber("17");
		
		Position position1 = new Position();
		position1.setName("Kierownik");
		
		Salary salary1 = new Salary();
		salary1.setAmount("5000");
		
		try 
		{
			Connection connection = DriverManager.getConnection(url);
			
			/*
			String dropTable = "drop table employees"; 				//kasowanie istniejących tabel
			String dropTable2 = "drop table companies";
			String dropTable3 = "drop table addresses";
			String dropTable4 = "drop table positions";
			String droptable5 = "drop table salaries";
			
			Statement stmtDrop = connection.createStatement();
			stmtDrop.executeUpdate(dropTable);
			stmtDrop.executeUpdate(dropTable2); 
			stmtDrop.executeUpdate(dropTable3);
			stmtDrop.executeUpdate(dropTable4);
			stmtDrop.executeUpdate(droptable5);
			*/
			
			/*														
			String createTable =									//tworzenie tabel, po pierwszym razie trzeba wykomentować
			 
					"CREATE TABLE employees("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20),"
					+ "surname VARCHAR(20)"
					+ ")";
						
			 String createTable2 =
					 
					"CREATE TABLE companies("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20),"
					+ "legalstructure VARCHAR(20),"
					+ "companyid VARCHAR(20)"
					+ ")";
					
			String createTable3 =
					"CREATE TABLE addresses("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "country VARCHAR(20),"
					+ "city VARCHAR(20),"
					+ "postalcode VARCHAR(20),"
					+ "street VARCHAR(20),"
					+ "housenumber VARCHAR(20)"
					+ ")";
					
			String createTable4 =
					"CREATE TABLE positions("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "name VARCHAR(20)"
					+ ")";
			
			String createTable5 =
					"CREATE TABLE salaries("
					+ "id int GENERATED BY DEFAULT AS IDENTITY,"
					+ "amount VARCHAR(20)"
					+ ")";
						
						
			Statement stmt = connection.createStatement();
			stmt.executeUpdate(createTable);
			stmt.executeUpdate(createTable2);
			stmt.executeUpdate(createTable3);
			stmt.executeUpdate(createTable4);
			stmt.executeUpdate(createTable5);
			*/														
			
			IRepository<Employee> employees = new EmployeeRepository(connection, new EmployeeBuilder());
			employees.save(employee1);
			List<Employee> employeesFromDb = employees.getAll();
			
			for(Employee employeeFromDb : employeesFromDb)
				System.out.println(employeeFromDb.getId()+" "+employeeFromDb.getName()+" "+employeeFromDb.getSurname());
			
			
			IRepository<Company> companies = new CompanyRepository(connection, new CompanyBuilder());
			companies.save(company1);
			List<Company> companiesFromDb = companies.getAll();
			for(Company companyFromDb : companiesFromDb)
				System.out.println(companyFromDb.getId()+" "+companyFromDb.getName()+" "
				+companyFromDb.getLegalStructure()+" "+companyFromDb.getCompanyId());
			
			IRepository<CompanyAddress> addresses = new CompanyAddressRepository(connection, new CompanyAddressBuilder());
			addresses.save(address1);
			List<CompanyAddress> addressesFromDb = addresses.getAll();
			for(CompanyAddress addressFromDb : addressesFromDb)
				System.out.println(addressFromDb.getId()+" "+addressFromDb.getCountry()+" "+addressFromDb.getCity()+" "
				+addressFromDb.getPostalCode()+" "+addressFromDb.getStreet()+" "+addressFromDb.getHouseNumber());
			
			IRepository<Position> positions = new PositionRepository(connection, new PositionBuilder());
			positions.save(position1);
			List<Position> positionsFromDb = positions.getAll();
			for(Position positionFromDb : positionsFromDb)
				System.out.println(positionFromDb.getId()+" "+positionFromDb.getName());
			
			IRepository<Salary> salaries = new SalaryRepository(connection, new SalaryBuilder());
			salaries.save(salary1);
			List<Salary> salariesFromDb = salaries.getAll();
			for(Salary salaryFromDb : salariesFromDb)
				System.out.println(salaryFromDb.getId()+" "+salaryFromDb.getAmount());
			
			/*
			Employee employee = employees.get(2);
			employee.setName("Marian");
			employees.update(employee);
			employees.delete(employeesFromDb.get(0));
			for(Employee employeeFromDb : employees.getAll())
				System.out.println(employeeFromDb.getId()+" "+employeeFromDb.getName()+" "+employeeFromDb.getSurname());
			*/
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("koniec");
	}

}